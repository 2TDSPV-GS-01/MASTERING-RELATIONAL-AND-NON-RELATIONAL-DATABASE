-- ENDERECO
CREATE OR REPLACE PROCEDURE SP_INSERE_ENDERECO (
    V_PAIS IN VARCHAR2,
    V_ESTADO IN VARCHAR2,
    V_CIDADE IN VARCHAR2,
    V_RUA IN VARCHAR2
) AS
BEGIN
    INSERT INTO T_FV_ENDERECO (
        ID_ENDERECO, DS_PAIS, DS_ESTADO, DS_CIDADE, DS_RUA
    ) VALUES (
        SEQ_ID_ENDERECO.NEXTVAL, V_PAIS, V_ESTADO, V_CIDADE, V_RUA
    );
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_ENDERECO (
    V_ID_ENDERECO IN NUMBER,
    V_RUA IN VARCHAR2
) AS
BEGIN
    UPDATE T_FV_ENDERECO
    SET DS_RUA = V_RUA
    WHERE ID_ENDERECO = V_ID_ENDERECO;
END;
/

CREATE OR REPLACE PROCEDURE SP_EXCLUI_ENDERECO (
    V_ID_ENDERECO IN NUMBER
) AS
BEGIN
    DELETE FROM T_FV_ENDERECO
    WHERE ID_ENDERECO = V_ID_ENDERECO;
END;
/

-- FORNECEDOR
CREATE OR REPLACE PROCEDURE SP_INSERE_FORNECEDOR (
    V_CNPJ IN VARCHAR2,
    V_NOME IN VARCHAR2,
    V_ID_ENDERECO IN NUMBER
) AS
BEGIN
    INSERT INTO T_FV_FORNECEDOR (
        DS_CNPJ, NM_FORNECEDOR, ID_ENDERECO
    ) VALUES (
        V_CNPJ, V_NOME, V_ID_ENDERECO
    );
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_FORNECEDOR (
    V_CNPJ IN VARCHAR2,
    V_NOME IN VARCHAR2,
    V_ID_ENDERECO IN NUMBER
) AS
BEGIN
    UPDATE T_FV_FORNECEDOR
    SET NM_FORNECEDOR = V_NOME,
        ID_ENDERECO = V_ID_ENDERECO
    WHERE DS_CNPJ = V_CNPJ;
END;
/

CREATE OR REPLACE PROCEDURE SP_EXCLUI_FORNECEDOR (
    V_CNPJ IN VARCHAR2
) AS
BEGIN
    DELETE FROM T_FV_FORNECEDOR
    WHERE DS_CNPJ = V_CNPJ;
END;
/

-- CONTATO
CREATE OR REPLACE PROCEDURE SP_INSERE_CONTATO (
    V_TELEFONE IN VARCHAR2,
    V_EMAIL IN VARCHAR2,
    V_DOC IN VARCHAR2 DEFAULT NULL
) AS
BEGIN
    IF LENGTH(TRIM(V_DOC)) = 11 THEN
        INSERT INTO T_FV_CONTATO (
            ID_CONTATO, DS_TELEFONE, DS_EMAIL, DS_CPF
        ) VALUES (
            SEQ_ID_CONTATO.NEXTVAL, V_TELEFONE, V_EMAIL, V_DOC
        );
    ELSIF LENGTH(TRIM(V_DOC)) = 14 THEN
        INSERT INTO T_FV_CONTATO (
            ID_CONTATO, DS_TELEFONE, DS_EMAIL, DS_CNPJ
        ) VALUES (
            SEQ_ID_CONTATO.NEXTVAL, V_TELEFONE, V_EMAIL, V_DOC
        );
    ELSE
        INSERT INTO T_FV_CONTATO (
            ID_CONTATO, DS_TELEFONE, DS_EMAIL
        ) VALUES (
            SEQ_ID_CONTATO.NEXTVAL, V_TELEFONE, V_EMAIL
        );
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao inserir contato: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_CONTATO (
    V_ID_CONTATO IN NUMBER,
    V_TELEFONE IN VARCHAR2,
    V_EMAIL IN VARCHAR2
) AS
BEGIN
    UPDATE T_FV_CONTATO
    SET DS_TELEFONE = V_TELEFONE,
        DS_EMAIL = V_EMAIL
    WHERE ID_CONTATO = V_ID_CONTATO;
END;
/

CREATE OR REPLACE PROCEDURE SP_EXCLUI_CONTATO (
    V_ID_CONTATO IN NUMBER
) AS
BEGIN
    DELETE FROM T_FV_CONTATO
    WHERE ID_CONTATO = V_ID_CONTATO;
END;
/

-- MATERIAL
CREATE OR REPLACE PROCEDURE SP_INSERE_MATERIAL (
    V_NOME        IN T_FV_MATERIAL.NM_MATERIAL%TYPE,
    V_TIPO        IN T_FV_MATERIAL.TP_MATERIAL%TYPE,
    V_ESTOQUE   IN T_FV_MATERIAL.NR_QUANT_ESTOQUE%TYPE,
    V_PRECO   IN T_FV_MATERIAL.NR_PRECO_UNIDADE%TYPE,
    V_CNPJ IN VARCHAR2
)
AS
BEGIN
    INSERT INTO T_FV_MATERIAL (
        ID_MATERIAL,
        NM_MATERIAL,
        TP_MATERIAL,
        NR_QUANT_ESTOQUE,
        NR_PRECO_UNIDADE,
        DS_CNPJ
    ) VALUES (
        SEQ_ID_MATERIAL.NEXTVAL,
        V_NOME,
        V_TIPO,
        V_ESTOQUE,
        V_PRECO,
        V_CNPJ
    );
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_MATERIAL (
    P_ID_MATERIAL        IN T_FV_MATERIAL.ID_MATERIAL%TYPE,
    P_NM_MATERIAL        IN T_FV_MATERIAL.NM_MATERIAL%TYPE,
    P_TP_MATERIAL        IN T_FV_MATERIAL.TP_MATERIAL%TYPE,
    P_NR_QUANT_ESTOQUE   IN T_FV_MATERIAL.NR_QUANT_ESTOQUE%TYPE,
    P_NR_PRECO_UNIDADE   IN T_FV_MATERIAL.NR_PRECO_UNIDADE%TYPE
) AS
BEGIN
    UPDATE T_FV_MATERIAL
    SET NM_MATERIAL = P_NM_MATERIAL,
        TP_MATERIAL = P_TP_MATERIAL,
        NR_QUANT_ESTOQUE = P_NR_QUANT_ESTOQUE,
        NR_PRECO_UNIDADE = P_NR_PRECO_UNIDADE
    WHERE ID_MATERIAL = P_ID_MATERIAL;
END;
/


CREATE OR REPLACE PROCEDURE SP_DELETA_MATERIAL (
    V_ID_MATERIAL IN NUMBER
) AS
BEGIN
    DELETE FROM T_FV_MATERIAL
    WHERE ID_MATERIAL = V_ID_MATERIAL;
END;
/

-- RESPONSAVEL
CREATE OR REPLACE PROCEDURE SP_INSERE_RESPONSAVEL (
    V_CPF IN T_FV_RESPONSAVEL.DS_CPF%TYPE,
    V_NOME IN T_FV_RESPONSAVEL.NM_RESPONSAVEL%TYPE
) AS
BEGIN
    INSERT INTO T_FV_RESPONSAVEL (DS_CPF, NM_RESPONSAVEL)
    VALUES (V_CPF, V_NOME);
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_RESPONSAVEL (
    V_CPF IN T_FV_RESPONSAVEL.DS_CPF%TYPE,
    V_NOME IN T_FV_RESPONSAVEL.NM_RESPONSAVEL%TYPE
) AS
BEGIN
    UPDATE T_FV_RESPONSAVEL
    SET NM_RESPONSAVEL = V_NOME
    WHERE DS_CPF = V_CPF;
END;
/

CREATE OR REPLACE PROCEDURE SP_DELETA_RESPONSAVEL (
    V_CPF IN VARCHAR2
) AS
BEGIN
    DELETE FROM T_FV_RESPONSAVEL
    WHERE DS_CPF = V_CPF;
END;
/

-- ESTACAO DE TRATAMENTO
CREATE OR REPLACE PROCEDURE SP_INSERE_ESTACAO (
    V_DT_INSTALACAO IN DATE,
    V_STATUS IN CHAR,
    V_CPF IN VARCHAR2 DEFAULT NULL
) AS
BEGIN
    IF V_CPF IS NULL THEN
    INSERT INTO T_FV_ESTACAO_TRATAMENTO (
        ID_ESTACAO_TRATAMENTO,
        DT_INSTALACAO,
        ST_ESTACAO
    )
    VALUES (
        SEQ_ID_ESTACAO.NEXTVAL,
        V_DT_INSTALACAO,
        UPPER(V_STATUS)
    );
    ELSE
    INSERT INTO T_FV_ESTACAO_TRATAMENTO (
        ID_ESTACAO_TRATAMENTO,
        DT_INSTALACAO,
        ST_ESTACAO,
        DS_CPF
    )
    VALUES (
        SEQ_ID_ESTACAO.NEXTVAL,
        V_DT_INSTALACAO,
        UPPER(V_STATUS),
        V_CPF
    );
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_ESTACAO (
    V_ID_ESTACAO IN NUMBER,
    V_DT_INSTALACAO IN DATE,
    V_STATUS IN CHAR,
    V_CPF IN VARCHAR2 DEFAULT NULL
) AS
BEGIN
    IF V_CPF IS NULL THEN
    UPDATE T_FV_ESTACAO_TRATAMENTO
    SET DT_INSTALACAO = V_DT_INSTALACAO,
        ST_ESTACAO = UPPER(V_STATUS)
    WHERE ID_ESTACAO_TRATAMENTO = V_ID_ESTACAO;
    ELSE
    UPDATE T_FV_ESTACAO_TRATAMENTO
    SET DT_INSTALACAO = V_DT_INSTALACAO,
        ST_ESTACAO = UPPER(V_STATUS),
        DS_CPF = V_CPF
    WHERE ID_ESTACAO_TRATAMENTO = V_ID_ESTACAO;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE SP_DELETA_ESTACAO (
    V_ID_ESTACAO IN NUMBER
) AS
BEGIN
    DELETE FROM T_FV_ESTACAO_TRATAMENTO
    WHERE ID_ESTACAO_TRATAMENTO = V_ID_ESTACAO;
END;
/


-- SENSOR
CREATE OR REPLACE PROCEDURE SP_INSERE_SENSOR (
    V_TP_SENSOR IN VARCHAR2,
    V_TP_MEDIDA IN VARCHAR2,
    V_ID_ESTACAO IN NUMBER
) AS
BEGIN
    INSERT INTO T_FV_SENSOR (
        ID_SENSOR,
        TP_SENSOR,
        TP_MEDIDA,
        ID_ESTACAO_TRATAMENTO
    )
    VALUES (
        SEQ_ID_SENSOR.NEXTVAL,
        V_TP_SENSOR,
        V_TP_MEDIDA,
        V_ID_ESTACAO
    );
END;
/

CREATE OR REPLACE PROCEDURE SP_ATUALIZA_SENSOR (
    V_ID_SENSOR IN NUMBER,
    V_TP_SENSOR IN VARCHAR2,
    V_TP_MEDIDA IN VARCHAR2,
    V_ID_ESTACAO IN NUMBER
) AS
BEGIN
    UPDATE T_FV_SENSOR
    SET TP_SENSOR = V_TP_SENSOR,
        TP_MEDIDA = V_TP_MEDIDA,
        ID_ESTACAO_TRATAMENTO = V_ID_ESTACAO
    WHERE ID_SENSOR = V_ID_SENSOR;
END;
/

CREATE OR REPLACE PROCEDURE SP_DELETA_SENSOR (
    V_ID_SENSOR IN NUMBER
) AS
BEGIN
    DELETE FROM T_FV_SENSOR
    WHERE ID_SENSOR = V_ID_SENSOR;
END;
/

-- REGISTRO MEDIDA
CREATE OR REPLACE PROCEDURE SP_INSERE_REGISTRO (
    V_ID_REGISTRO IN VARCHAR2,
    V_VALOR IN NUMBER,
    V_DT_REGISTRO IN DATE,
    V_ID_SENSOR IN NUMBER
) AS
BEGIN
    INSERT INTO T_FV_REGISTRO_MEDIDA (
        ID_REGISTRO,
        NR_RESULTADO,
        DT_REGISTRO,
        ID_SENSOR
    )
    VALUES (
        v_ID_REGISTRO,
        V_VALOR,
        V_DT_REGISTRO,
        V_ID_SENSOR
    );
END;
/

CREATE OR REPLACE PROCEDURE SP_DELETA_REGISTRO (
    V_ID_REGISTRO IN VARCHAR2
) AS
BEGIN
    DELETE FROM T_FV_REGISTRO_MEDIDA
    WHERE ID_REGISTRO = V_ID_REGISTRO;
END;
/
